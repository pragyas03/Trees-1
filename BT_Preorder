// Time Complexity: O(N), N = number of nodes in the tree
// Space Complexity: O(N), N = number of nodes in the tree (hashmap + recursive stack space)

class Solution {
    int preIdx;
    Map<Integer, Integer> map;
    public TreeNode buildTree(int[] preorder, int[] inorder) {
        if(preorder == null || preorder.length == 0)
            return null;
        
        map = new HashMap<>();
        
        for(int i = 0; i < inorder.length; i++) 
            map.put(inorder[i], i);
        
        return helper(preorder, inorder, 0, inorder.length-1);
    }
    private TreeNode helper(int[] preorder, int[] inorder, int start, int end) {
        // base case
        if(start > end)
            return null;
        
        int rootVal = preorder[preIdx];
        preIdx++;
        int rootIdx = map.get(rootVal);
        TreeNode root = new TreeNode(rootVal);
        
        root.left = helper(preorder, inorder, start, rootIdx-1);
        root.right = helper(preorder, inorder, rootIdx+1, end);
        
        return root;
    }
}
